#!/usr/bin/env node --harmony

'use strict';

var program = require('commander');
var prompt = require('prompt');
var Table = require('cli-table');
var MMS = require('node-mms-client');
var q = require('q');

var MopsConfig = require('../lib/util/MopsConfig');

program
  .option('-g, --groupId [groupId]', 'MMS Group ID')
  .parse(process.argv);

var groupId = program.groupId;
var requiredFields = [];
if (!groupId) {
    requiredFields.push('groupId');
}

if (requiredFields.length > 0) {
    prompt.message = "Required Field";
    prompt.start();
    prompt.get(requiredFields, function (err, result) {
        if (err) {
            console.log("An error occurred");
        } else {
            if (!groupId) {
                groupId = result.groupId;
            }
            topology(groupId);
        }
    });
} else {
    topology(groupId);
}

function topology(groupId) {
    var config = new MopsConfig();
    showTable(groupId, config.get('host'), config.get('username'), config.get('apiKey'));
}

function showTable(groupId, host, user, apiKey) {
    var mms = new MMS({
        username: user,
        apiKey: apiKey,
        host: host
    });

    var hosts = mms.groups(groupId).hosts().list();
    var clusters = mms.groups(groupId).clusters().list();
    var alerts = mms.groups(groupId).alerts().list();
    var backupConfigs = mms.groups(groupId).backupconfigs().list();

    q.all(hosts, clusters, alerts, backupConfigs).then(
        function(hosts, clusters, alerts, backupConfigs) {
            var table = new Table({
                head: ['Type', 'Name', 'Last Ping', 'Alerts', 'Backup', 'Version', 'Attributes']
            });

            table.push(
                ['Cluster', 'Cluster Music\na5bf0a253d6a2d0c43391f786832b9d5', '', '0', 'Yes', '2.4.10', '2 shards, 1 config, 1 mongos'],
                    ['  Replica Set\na5bf0a253d6a2d0c43391f786832b9d5', 'Robin', '', '0', 'Yes', '2.4.10', '3 mongods'],
                        ['    Member', 'ec2-184-73-95-149.compute-1.amazonaws.com:27017\na5bf0a253d6a2d0c43391f786832b9d5', '1 min ago', '0', 'Yes', '2.4.10', 'Primary'],
                        ['    Member', 'ec2-184-73-95-150.compute-1.amazonaws.com:27017\na5bf0a253d6a2d0c43391f786832b9d5', '1 min ago', '0', 'Yes', '2.4.10', 'Secondary'],
                        ['    Member', 'ec2-184-73-95-151.compute-1.amazonaws.com:27017\na5bf0a253d6a2d0c43391f786832b9d5', '1 min ago', '0', 'Yes', '2.4.10', 'Secondary'],
                    ['  Config', 'ec2-184-73-95-152.compute-1.amazonaws.com:27017\na5bf0a253d6a2d0c43391f786832b9d5', '1 min ago', '0', 'Yes', '2.4.10', ''],
                    ['  Mongos', 'ec2-184-73-95-153.compute-1.amazonaws.com:27017\na5bf0a253d6a2d0c43391f786832b9d5', '1 min ago', '0', 'No', '2.4.10', ''],

                ['Replica Set', 'Robin\na5bf0a253d6a2d0c43391f786832b9d5', '', '1', 'No', '2.6.3', '3 mongods'],
                    ['  Member', 'ec2-184-72-95-149.compute-1.amazonaws.com:27017\na5bf0a253d6a2d0c43391f786832b9d5', '1 min ago', '0', 'No', '2.6.3', 'Primary'],
                    ['  Member', 'ec2-184-72-95-150.compute-1.amazonaws.com:27017\na5bf0a253d6a2d0c43391f786832b9d5', '1 min ago', '1', 'No', '2.6.3', 'Secondary'],
                    ['  Member', 'ec2-184-72-95-151.compute-1.amazonaws.com:27017\na5bf0a253d6a2d0c43391f786832b9d5', '1 min ago', '0', 'No', '2.6.3', 'Secondary'],

                ['Standalone', 'ip-10-60-97-75:27017\na5bf0a253d6a2d0c43391f786832b9d5', '1 min ago', '0', 'No', '2.4.11', '']
            );

            console.log(table.toString());
        },
        function(error) {
            console.log(error);
        }
    );
}
